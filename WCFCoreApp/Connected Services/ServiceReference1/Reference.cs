//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="ServiceReference1.ICalculatorDuplex", CallbackContract=typeof(ServiceReference1.ICalculatorDuplexCallback))]
    public interface ICalculatorDuplex
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/ICalculatorDuplex/Clear")]
        System.Threading.Tasks.Task ClearAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/ICalculatorDuplex/AddTo")]
        System.Threading.Tasks.Task AddToAsync(double n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/ICalculatorDuplex/SubtractFrom")]
        System.Threading.Tasks.Task SubtractFromAsync(double n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/ICalculatorDuplex/MultiplyBy")]
        System.Threading.Tasks.Task MultiplyByAsync(double n);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/ICalculatorDuplex/DivideBy")]
        System.Threading.Tasks.Task DivideByAsync(double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICalculatorDuplex/Test", ReplyAction="http://Microsoft.ServiceModel.Samples/ICalculatorDuplex/TestResponse")]
        System.Threading.Tasks.Task<string> TestAsync(double n);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface ICalculatorDuplexCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/ICalculatorDuplex/Result")]
        void Result([System.ServiceModel.MessageParameterAttribute(Name="result")] double result1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/ICalculatorDuplex/Equation")]
        void Equation(string eqn);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface ICalculatorDuplexChannel : ServiceReference1.ICalculatorDuplex, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class CalculatorDuplexClientBase : System.ServiceModel.DuplexClientBase<ServiceReference1.ICalculatorDuplex>, ServiceReference1.ICalculatorDuplex
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CalculatorDuplexClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, CalculatorDuplexClientBase.GetDefaultBinding(), CalculatorDuplexClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_ICalculatorDuplex.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalculatorDuplexClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, CalculatorDuplexClientBase.GetBindingForEndpoint(endpointConfiguration), CalculatorDuplexClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalculatorDuplexClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, CalculatorDuplexClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalculatorDuplexClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, CalculatorDuplexClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CalculatorDuplexClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task ClearAsync()
        {
            return base.Channel.ClearAsync();
        }
        
        public System.Threading.Tasks.Task AddToAsync(double n)
        {
            return base.Channel.AddToAsync(n);
        }
        
        public System.Threading.Tasks.Task SubtractFromAsync(double n)
        {
            return base.Channel.SubtractFromAsync(n);
        }
        
        public System.Threading.Tasks.Task MultiplyByAsync(double n)
        {
            return base.Channel.MultiplyByAsync(n);
        }
        
        public System.Threading.Tasks.Task DivideByAsync(double n)
        {
            return base.Channel.DivideByAsync(n);
        }
        
        public System.Threading.Tasks.Task<string> TestAsync(double n)
        {
            return base.Channel.TestAsync(n);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICalculatorDuplex))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICalculatorDuplex))
            {
                return new System.ServiceModel.EndpointAddress(new System.Uri("net.tcp://localhost:8456/Hospital_Service/ClinicalService"), new System.ServiceModel.DnsEndpointIdentity("localhost"));
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CalculatorDuplexClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_ICalculatorDuplex);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CalculatorDuplexClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_ICalculatorDuplex);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_ICalculatorDuplex,
        }
    }
    
    public class ResultReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ResultReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public double result1
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    public class EquationReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public EquationReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string eqn
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public partial class CalculatorDuplexClient : CalculatorDuplexClientBase
    {
        
        public CalculatorDuplexClient(EndpointConfiguration endpointConfiguration) : 
                this(new CalculatorDuplexClientCallback(), endpointConfiguration)
        {
        }
        
        private CalculatorDuplexClient(CalculatorDuplexClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration)
        {
            callbackImpl.Initialize(this);
        }
        
        public CalculatorDuplexClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new CalculatorDuplexClientCallback(), binding, remoteAddress)
        {
        }
        
        private CalculatorDuplexClient(CalculatorDuplexClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public CalculatorDuplexClient() : 
                this(new CalculatorDuplexClientCallback())
        {
        }
        
        private CalculatorDuplexClient(CalculatorDuplexClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<ResultReceivedEventArgs> ResultReceived;
        
        public event System.EventHandler<EquationReceivedEventArgs> EquationReceived;
        
        private void OnResultReceived(object state)
        {
            if ((this.ResultReceived != null))
            {
                object[] results = ((object[])(state));
                this.ResultReceived(this, new ResultReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnEquationReceived(object state)
        {
            if ((this.EquationReceived != null))
            {
                object[] results = ((object[])(state));
                this.EquationReceived(this, new EquationReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class CalculatorDuplexClientCallback : object, ICalculatorDuplexCallback
        {
            
            private CalculatorDuplexClient proxy;
            
            public void Initialize(CalculatorDuplexClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void Result(double result1)
            {
                this.proxy.OnResultReceived(new object[] {
                            result1});
            }
            
            public void Equation(string eqn)
            {
                this.proxy.OnEquationReceived(new object[] {
                            eqn});
            }
        }
    }
}
